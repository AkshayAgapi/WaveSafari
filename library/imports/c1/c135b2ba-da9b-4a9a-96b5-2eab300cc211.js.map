{"version":3,"sources":["../../../../assets/Script/assets/Script/SegmentManager.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAM,EAAC,OAAO,EAAE,QAAQ,EAAC,GAAG,EAAE,CAAC,UAAU,CAAC;AAiB1C,IAAqB,cAAc,GAAnC,MAAqB,cAAe,SAAQ,EAAE,CAAC,SAAS;IADxD;;QAGI,kBAAa,GAAc,IAAI,CAAC;QAGhC,kBAAa,GAAc,IAAI,CAAC;QAGhC,kBAAa,GAAc,IAAI,CAAC;QAGhC,mBAAc,GAAc,IAAI,CAAC;QAGjC,cAAS,GAAc,IAAI,CAAC;QAG5B,kBAAa,GAAc,IAAI,CAAC;QAGhC,WAAM,GAAY,IAAI,CAAC;QAGvB,yBAAoB,GAAW,CAAC,CAAC;QAGjC,kBAAa,GAAW,GAAG,CAAC;QAEpB,oBAAe,GAAc,EAAE,CAAC;QAChC,gBAAW,GAAgC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;IAmHxE,CAAC;IAjHG,MAAM;QACF,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC1B,IAAI,CAAC,eAAe,EAAE,CAAC;IAC3B,CAAC;IAED,eAAe;QACX,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,IAAkB,EAAE,EAAE;YAC5E,IAAI,GAAG,EAAE;gBACL,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACd,OAAO;aACV;YAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;YAC7B,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,qBAAqB;QACjB,IAAI,SAAS,GAAW,CAAC,CAAC;QAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC,EAAE,EAAE;YAChD,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;YAC9B,SAAS,IAAI,IAAI,CAAC,aAAa,CAAC;SACnC;IACL,CAAC;IAED,UAAU,CAAC,SAAiB,EAAE,YAAoB;QAC9C,MAAM,WAAW,GAAgB,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC5G,MAAM,UAAU,GAAY,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC/D,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;QAE5C,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAiB,EAAE,EAAE;YAC5C,MAAM,MAAM,GAAc,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE/D,IAAI,MAAM,EAAE;gBACR,MAAM,OAAO,GAAY,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBAChD,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACpC,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;gBAC9B,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBAE7D,4BAA4B;gBAC5B,IAAI,IAAI,CAAC,KAAK,EAAE;oBACZ,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBAChD;qBAAM;oBACH,gFAAgF;oBAChF,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,kCAAkC;iBAC7D;gBAED,IAAI,IAAI,CAAC,MAAM,EAAE;oBACb,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iBACxD;qBAAM;oBACH,gFAAgF;oBAChF,OAAO,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;iBACpC;gBAED,IAAI,IAAI,CAAC,IAAI,EAAE;oBACX,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;iBAC1E;qBAAM;oBACH,gFAAgF;oBAChF,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;iBACjD;gBAGD,+BAA+B;gBAC/B,IAAI,OAAO,IAAI,CAAC,QAAQ,KAAK,WAAW,EAAE;oBACtC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;iBACjC;qBAAM;oBACH,sFAAsF;oBACtF,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,qCAAqC;iBAC3D;aACJ;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC1C,CAAC;IAGD,oBAAoB,CAAC,IAAY;QAC7B,QAAQ,IAAI,EAAE;YACV,KAAK,SAAS;gBACV,OAAO,IAAI,CAAC,aAAa,CAAC;YAC9B,KAAK,SAAS;gBACV,OAAO,IAAI,CAAC,aAAa,CAAC;YAC9B,KAAK,UAAU;gBACX,OAAO,IAAI,CAAC,cAAc,CAAC;YAC/B,KAAK,KAAK;gBACN,OAAO,IAAI,CAAC,SAAS,CAAC;YAC1B,KAAK,SAAS;gBACV,OAAO,IAAI,CAAC,aAAa,CAAC;YAC9B;gBACI,OAAO,IAAI,CAAC;SACnB;IACL,CAAC;IAED,MAAM,CAAC,EAAU;QAEb,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;YACjC,IAAI,UAAU,GAAW,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,oDAAoD;YACrG,IAAI,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACxE,IAAI,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;YAEtC,8FAA8F;YAC9F,IAAI,UAAU,GAAG,QAAQ,EAAE;gBACvB,IAAI,OAAO,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,oCAAoC;gBAC/F,IAAI,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC,CAAC,2BAA2B;gBAChF,gBAAgB,CAAC,WAAW,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,2BAA2B;gBACrE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,+CAA+C;aAC/F;SACJ;aAAM;YACH,2FAA2F;YAC3F,OAAO,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;SACnE;IACL,CAAC;CACJ,CAAA;AA9IG;IADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;qDACY;AAGhC;IADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;qDACY;AAGhC;IADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;qDACY;AAGhC;IADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;sDACa;AAGjC;IADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;iDACQ;AAG5B;IADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;qDACY;AAGhC;IADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;8CACK;AAGvB;IADC,QAAQ;4DACwB;AAGjC;IADC,QAAQ;qDACmB;AA1BX,cAAc;IADlC,OAAO;GACa,cAAc,CAgJlC;kBAhJoB,cAAc","file":"","sourceRoot":"../../../../assets/Script","sourcesContent":["const {ccclass, property} = cc._decorator;\n\ninterface SegmentItem {\n    type: string;\n    position: { x: number, y: number };\n    scale?: { x: number, y: number }; \n    rotation?: number; \n    anchor? : {x:number, y:number };\n    size : {width:number, height:number};\n}\n\ninterface SegmentData {\n    id: number;\n    items: SegmentItem[];\n}\n\n@ccclass\nexport default class SegmentManager extends cc.Component {\n    @property(cc.Prefab)\n    segmentPrefab: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    island1Prefab: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    island2Prefab: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    obstaclePrefab: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    gemPrefab: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    fuelCanPrefab: cc.Prefab = null;\n\n    @property(cc.Node)\n    target: cc.Node = null;\n\n    @property\n    initialSegmentsCount: number = 5;\n\n    @property\n    segmentHeight: number = 200;\n\n    private currentSegments: cc.Node[] = [];\n    private segmentData: { segments: SegmentData[] } = { segments: [] };\n\n    onLoad() {\n        this.currentSegments = [];\n        this.loadSegmentData();\n    }\n\n    loadSegmentData() {\n        cc.loader.loadRes(\"Data/SegmentData\", cc.JsonAsset, (err, data: cc.JsonAsset) => {\n            if (err) {\n                cc.error(err);\n                return;\n            }\n\n            this.segmentData = data.json;\n            this.createInitialSegments();\n        });\n    }\n\n    createInitialSegments(): void {\n        let startPosY: number = 0;\n        for (let i = 0; i < this.initialSegmentsCount; i++) {\n            this.addSegment(startPosY, i);\n            startPosY += this.segmentHeight;\n        }\n    }\n\n    addSegment(yPosition: number, segmentIndex: number): void {\n        const segmentInfo: SegmentData = this.segmentData.segments[segmentIndex % this.segmentData.segments.length];\n        const newSegment: cc.Node = cc.instantiate(this.segmentPrefab);\n        newSegment.setParent(this.node);\n        newSegment.setPosition(cc.v2(0, yPosition));\n    \n        segmentInfo.items.forEach((item: SegmentItem) => {\n            const prefab: cc.Prefab = this.getPrefabForItemType(item.type);\n     \n            if (prefab) {\n                const newItem: cc.Node = cc.instantiate(prefab);\n                newItem.name = item.type.toString();\n                newItem.setParent(newSegment);\n                newItem.setPosition(cc.v2(item.position.x, item.position.y));\n    \n                // Set scale if it's defined\n                if (item.scale) {\n                    newItem.setScale(item.scale.x, item.scale.y);\n                } else {\n                    // Optionally set a default scale, or do nothing to keep prefab's original scale\n                    newItem.setScale(1, 1); // Default scale, adjust as needed\n                }\n\n                if (item.anchor) {\n                    newItem.setAnchorPoint(item.anchor.x, item.anchor.y);\n                } else {\n                    // Optionally set a default scale, or do nothing to keep prefab's original scale\n                    newItem.setAnchorPoint(0.5, 0.5);\n                }\n\n                if (item.size) {\n                    newItem.setContentSize(new cc.Size(item.size.width, item.size.height));\n                } else {\n                    // Optionally set a default scale, or do nothing to keep prefab's original scale\n                    newItem.setContentSize(new cc.Size(400, 400));\n                }\n\n    \n                // Set rotation if it's defined\n                if (typeof item.rotation !== 'undefined') {\n                    newItem.angle = item.rotation;\n                } else {\n                    // Optionally set a default rotation, or do nothing to keep prefab's original rotation\n                    newItem.angle = 0; // Default rotation, adjust as needed\n                }\n            }\n        });\n    \n        this.currentSegments.push(newSegment);\n    }\n    \n\n    getPrefabForItemType(type: string): cc.Prefab {\n        switch (type) {\n            case 'island1':\n                return this.island1Prefab;\n            case 'island2':\n                return this.island2Prefab;\n            case 'obstacle':\n                return this.obstaclePrefab;\n            case 'gem':\n                return this.gemPrefab;\n            case 'fuelCan':\n                return this.fuelCanPrefab;\n            default:\n                return null;\n        }\n    }\n\n    update(dt: number): void {\n\n        if (this.currentSegments.length > 0) {\n            let cameraPosY: number = this.target.position.y; // or this.target.position.y for player's Y position\n            let lastSegment = this.currentSegments[this.currentSegments.length - 1];\n            let halfwayY = lastSegment.position.y;\n        \n            // If the camera's Y position is greater than halfwayY, it's time to recycle the first segment\n            if (cameraPosY > halfwayY) {\n                let newPosY = lastSegment.position.y + this.segmentHeight; // Position for the recycled segment\n                let segmentToRecycle = this.currentSegments.shift(); // Remove the first segment\n                segmentToRecycle.setPosition(0, newPosY); // Reposition it to the top\n                this.currentSegments.push(segmentToRecycle); // Add it back to the array as the last element\n            }\n        } else {\n            // Handle the case where there are no segments (e.g., log a warning or initialize segments)\n            console.warn(\"No segments available in currentSegments array.\");\n        }       \n    }\n}\n"]}